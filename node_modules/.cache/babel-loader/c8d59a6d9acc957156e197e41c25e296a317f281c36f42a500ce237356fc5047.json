{"ast":null,"code":"var _jsxFileName = \"/Users/yvetteagyei/Documents/GitHub/rampChallenge/src/capturingFlagComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CapturingFlagComponent = () => {\n  _s();\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [displayedText, setDisplayedText] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(\"https://wgg522pwivhvi5gqsn675gth3q0otdja.lambda-url.us-east-1.on.aws/616e79\");\n        if (!response.ok) {\n          throw new Error(\"Network response was not ok\");\n        }\n        const result = await response.text();\n        console.log(result);\n        setData(result);\n        setDisplayedText(Array(result.length).fill(\"_\"));\n      } catch (error) {\n        console.log(error);\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, []); // Empty dependency array means this runs once on mount\n\n  useEffect(() => {\n    if (!data) return; // Only start typewriter effect if word is loaded\n\n    let index = 0;\n    const interval = setInterval(() => {\n      setDisplayedText(prevText => {\n        const newText = [...prevText];\n        newText[index] = data[index];\n        return newText;\n      });\n      index += 1;\n      if (index === data.length) clearInterval(interval);\n    }, 500); // Adjust speed as needed\n\n    return () => clearInterval(interval);\n  }, [data]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      style: {\n        \"list-style-type\": \"none\"\n      },\n      children: displayedText.slice(0, currentIndex).split(\"\").map((char, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        style: {\n          display: \"inline\"\n        },\n        children: char\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(CapturingFlagComponent, \"e1wOFO73ElTdUisBcQ/YnzEEsY4=\");\n_c = CapturingFlagComponent;\nexport default CapturingFlagComponent;\nvar _c;\n$RefreshReg$(_c, \"CapturingFlagComponent\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","CapturingFlagComponent","_s","data","setData","loading","setLoading","error","setError","currentIndex","setCurrentIndex","displayedText","setDisplayedText","fetchData","response","fetch","ok","Error","result","text","console","log","Array","length","fill","message","index","interval","setInterval","prevText","newText","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","style","slice","split","map","char","display","_c","$RefreshReg$"],"sources":["/Users/yvetteagyei/Documents/GitHub/rampChallenge/src/capturingFlagComponent.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nconst CapturingFlagComponent = () => {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [displayedText, setDisplayedText] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(\n          \"https://wgg522pwivhvi5gqsn675gth3q0otdja.lambda-url.us-east-1.on.aws/616e79\"\n        );\n\n        if (!response.ok) {\n          throw new Error(\"Network response was not ok\");\n        }\n        const result = await response.text();\n        console.log(result);\n        setData(result);\n        setDisplayedText(Array(result.length).fill(\"_\"));\n      } catch (error) {\n        console.log(error);\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []); // Empty dependency array means this runs once on mount\n\n  useEffect(() => {\n    if (!data) return; // Only start typewriter effect if word is loaded\n\n    let index = 0;\n    const interval = setInterval(() => {\n      setDisplayedText((prevText) => {\n        const newText = [...prevText];\n        newText[index] = data[index];\n        return newText;\n      });\n      index += 1;\n      if (index === data.length) clearInterval(interval);\n    }, 500); // Adjust speed as needed\n\n    return () => clearInterval(interval);\n  }, [data]);\n  if (loading) return <div>Loading...</div>;\n  if (error) return <div>Error: {error}</div>;\n  return (\n    <div>\n      <ul style={{ \"list-style-type\": \"none\" }}>\n        {displayedText\n          .slice(0, currentIndex)\n          .split(\"\")\n          .map((char, index) => (\n            <li style={{ display: \"inline\" }} key={index}>\n              {char}\n            </li>\n          ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default CapturingFlagComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}