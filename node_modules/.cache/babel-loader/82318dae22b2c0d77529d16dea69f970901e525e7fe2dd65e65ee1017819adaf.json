{"ast":null,"code":"var _jsxFileName = \"/Users/yvetteagyei/Documents/GitHub/rampChallenge/src/App.js\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport CapturingFlagComponent from \"./capturingFlagComponent\";\n//script I used to get url\n\n/* <script>\n    document.addEventListener(\"DOMContentLoaded\", function () {\n      // Select all elements with both the 'char' and 'val' classes\n      const elements = document.querySelectorAll(\n        \"code.ramp div.ramp span.ramp i.char\"\n      );\n      let url = \"\";\n      // Loop through each element and get the 'value' attribute\n      elements.forEach((element) => {\n        // Get the 'value' attribute\n        const value = element.getAttribute(\"value\");\n        url += value;\n        console.log(url);\n      });\n    });\n  </script> */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        className: \"App-logo\",\n        alt: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Capture the Flag\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CapturingFlagComponent, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","CapturingFlagComponent","jsxDEV","_jsxDEV","App","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/yvetteagyei/Documents/GitHub/rampChallenge/src/App.js"],"sourcesContent":["import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport CapturingFlagComponent from \"./capturingFlagComponent\";\n//script I used to get url\n\n/* <script>\n    document.addEventListener(\"DOMContentLoaded\", function () {\n      // Select all elements with both the 'char' and 'val' classes\n      const elements = document.querySelectorAll(\n        \"code.ramp div.ramp span.ramp i.char\"\n      );\n      let url = \"\";\n      // Loop through each element and get the 'value' attribute\n      elements.forEach((element) => {\n        // Get the 'value' attribute\n        const value = element.getAttribute(\"value\");\n        url += value;\n        console.log(url);\n      });\n    });\n  </script> */\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <h1>Capture the Flag</h1>\n        <CapturingFlagComponent />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,IAAI,MAAM,YAAY;AAC7B,OAAO,WAAW;AAClB,OAAOC,sBAAsB,MAAM,0BAA0B;AAC7D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA,SAAAC,MAAA,IAAAC,OAAA;AAiBA,SAASC,GAAGA,CAAA,EAAG;EACb,oBACED,OAAA;IAAKE,SAAS,EAAC,KAAK;IAAAC,QAAA,eAClBH,OAAA;MAAQE,SAAS,EAAC,YAAY;MAAAC,QAAA,gBAC5BH,OAAA;QAAKI,GAAG,EAAEP,IAAK;QAACK,SAAS,EAAC,UAAU;QAACG,GAAG,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAClDT,OAAA;QAAAG,QAAA,EAAI;MAAgB;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACzBT,OAAA,CAACF,sBAAsB;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV;AAACC,EAAA,GAVQT,GAAG;AAYZ,eAAeA,GAAG;AAAC,IAAAS,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}